{"version":3,"sources":["components/DomainInfo.js","api/domain.js"],"names":["UserRow","props","toggleEditNav","setState","modalEditNav","state","toggleEventRow","toggle","expandDescription","user","this","id","sourceId","Fragment","key","scope","color","size","onClick","className","createdAt","name","source","dataType","left","duration","colSpan","JSON","stringify","parse","defs","accumulationKeys","React","Component","User","componentWillMount","getOneDomain","fakeAuth","getAccessToken","match","params","then","res","console","log","data","renderTable","list","responsive","hover","undefined","Object","keys","length","map","ele","eleChild","index","field","width","message","description","domainsData","lg","striped","moment","format","dataDefinitions","createDomain","token","a","postDataTokenMode","editDomain","domainId","deleteDomain","getDomains","page","url","fetch","method","headers","Authorization","response","status","statusText","swal","json","catch","signout"],"mappings":"qSAQMA,E,YACF,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAKRC,cAAc,WACZ,EAAKC,SAAS,CACZC,cAAc,EAAKC,MAAMD,gBARX,EAWlBE,eAAe,WACX,IAAIC,GAAS,EAAKF,MAAMG,kBACxB,EAAKL,SAAS,CAACK,kBAAkBD,KAXnC,EAAKF,MAAQ,CACXG,mBAAmB,GAHL,E,sEAiBlB,IAAMC,EAAOC,KAAKT,MAAMQ,KACV,mBAAeA,EAAKE,IAChB,mBAAeF,EAAKG,UACtC,OACI,kBAAC,IAAMC,SAAP,KAEE,wBAAIC,IAAKL,EAAKE,IACd,wBAAII,MAAM,OACV,kBAAC,IAAD,CAAQC,MAAM,QAAQC,KAAK,KAAKC,QAASR,KAAKJ,gBAAgB,uBAAGa,UAAWT,KAAKL,MAAMG,kBAAkB,iBAAiB,uBAE1H,4BAAKC,EAAKE,IACV,4BAAKF,EAAKW,WACV,4BAAKX,EAAKY,MACV,4BAAKZ,EAAKa,QACV,4BAAKb,EAAKc,WAEXb,KAAKL,MAAMG,kBACR,kBAAC,IAAD,CAAOgB,MAAI,EAACC,SAAS,OACnB,4BAAI,wBAAIC,QAAS,GACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,uCAEF,kBAAC,IAAD,KACI,6BAAK,6BAAMC,KAAKC,UAAUD,KAAKE,MAAMpB,EAAKqB,MAAM,KAAK,OAG3D,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,gDAEF,kBAAC,IAAD,KACI,6BAAK,6BAAMH,KAAKC,UAAUnB,EAAKsB,iBAAiB,KAAK,UAK1D,kC,GAvDOC,IAAMC,WA6DtBC,E,YAEJ,WAAYjC,GAAO,IAAD,8BACd,4CAAMA,KAMVkC,mBAAmB,WACjBC,YAAaC,IAASC,iBAAkB,EAAKrC,MAAMsC,MAAMC,OAAO7B,IAAI8B,MAAK,SAAAC,GACtEC,QAAQC,IAAIF,EAAIG,MACZH,EAAIG,MACP,EAAK1C,SAAS,CACV0C,KAAKH,EAAIG,WAZD,EAiBpBC,YAAY,SAACC,GACT,OAAO,kBAAC,IAAD,CAAOC,YAAU,EAACC,OAAK,GAC1B,+BACI,iCACQC,IAAPH,GAAiBI,OAAOC,KAAKL,GAAMM,OAAO,EAC3CF,OAAOC,KAAKL,EAAK,IAAIO,KAAI,SAAAC,GACrB,MAAU,kBAANA,EAEA,oCACA,wBAAIxC,MAAM,OAAV,mBAGCoC,OAAOC,KAAKL,EAAK,GAAGQ,IAAMD,KAAI,SAAAE,GAAQ,OACnC,wBAAIzC,MAAM,OACTyC,OAMM,qBAAND,EACG,wBAAIxC,MAAM,OAAOwC,QADxB,KAIR,+BAGL,oCACUL,IAATH,EAAqBA,EAAKO,KAAI,SAACC,EAAIE,GAAL,OAC3B,wBAAI3C,IAAK2C,GAGRN,OAAOC,KAAKG,GAAKF,OAAO,EAAEF,OAAOC,KAAKG,GAAKD,KAAI,SAAAI,GAC5C,MAAc,aAAVA,EACQ,wBAAI3C,MAAM,MAAM4C,MAAM,OAAtB,IACFJ,EAAIG,GAAO/C,GADT,KACe4C,EAAIG,GAAOE,QAD1B,MACsCL,EAAIG,GAAOG,aAG5C,qBAARH,EACG,wBAAI3C,MAAM,OACjBwC,EAAIG,SAFJ,KAKN,iCAEJ,gCA5DL,EAAKrD,MAAM,CACTwC,KAAK,IAHO,E,sEAoEhB,IAAMiB,EAAcpD,KAAKL,MAAMwC,KAE/B,OACE,yBAAK1B,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK4C,GAAI,GACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,gCAAQ,uBAAG5C,UAAU,mBAArB,cAAsDT,KAAKT,MAAMsC,MAAMC,OAAO7B,KAEhF,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqC,YAAU,EAACgB,SAAO,EAACf,OAAK,GAC7B,+BAEIa,EAAYX,OAAOC,KAAKU,GAAaR,KAAI,SAAAxC,GACrC,MAAW,cAAPA,EAEI,wBAAIA,IAAKA,GACP,sCAAQA,EAAR,MACA,4BAAI,gCAASmD,IAAOH,EAAYhD,IAAMoD,OAAO,UAIxC,oBAANpD,EAEH,wBAAIA,IAAKA,GACP,sCAAQA,EAAR,MACA,4BAAI,gCAASgD,EAAYhD,WAJ5B,KAQJ,mCAQrB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKiD,GAAI,IACL,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,gCAAQ,uBAAG5C,UAAU,mBAArB,qBAEF,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO6B,YAAU,EAACC,OAAK,GACrB,+BACI,4BACA,wBAAIlC,MAAM,QACR,wBAAIA,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,eAIJ,+BACG+C,EAAYK,gBAAgBL,EAAYK,gBAAgBb,KAAI,SAAC7C,GAAD,OAC3D,kBAACT,EAAD,CAASc,IAAKL,EAAKE,GAAIF,KAAMA,OAC7B,wC,GAnIHwB,aA+IJC,a,8QCjNR,SAAekC,EAAtB,oC,4CAAO,WAA4BvB,EAAMwB,GAAlC,SAAAC,EAAA,sEACUC,YAAkB,OAAO,qBAAsB1B,EAAMwB,GAAO5B,MAAK,SAACI,GAE3E,OADAF,QAAQC,IAAIC,GACLA,KAHR,oF,sBAOA,SAAe2B,EAAtB,sC,4CAAO,WAA0BC,EAAU5B,EAAMwB,GAA1C,SAAAC,EAAA,sEACUC,YAAkB,MAAM,sBAAsBE,EAAU5B,EAAMwB,GAAO5B,MAAK,SAACI,GAEpF,OADAF,QAAQC,IAAIC,GACLA,KAHR,oF,sBAOA,SAAe6B,EAAtB,sC,4CAAO,WAA4BD,EAAU5B,EAAMwB,GAA5C,SAAAC,EAAA,+EACIC,YAAkB,SAAS,sBAAsBE,EAAU5B,EAAMwB,GAAO5B,MAAK,SAACI,GAEjF,OADAF,QAAQC,IAAIC,GACLA,MAHR,4C,sBAOA,SAAe8B,EAAtB,sC,4CAAO,WAA0BN,EAAMO,EAAK3D,GAArC,eAAAqD,EAAA,6DACCO,EAAI,2BAA2BD,EAAK,SAAS3D,EAD9C,SAEU6D,MAAMD,EAAI,CACnBE,OAAO,MACPC,QAAQ,CACJC,cAAc,UAAUZ,KAG/B5B,MAAK,SAAAyC,GACF,IAAIxC,EAAMwC,EAEV,OADAxC,EAAIG,KAAO,GACW,MAAlBqC,EAASC,QACTxC,QAAQC,IAAI,QAAUiC,EAAK,IAAIK,EAASC,OAAQ,IAAID,EAASE,YAE7DC,IAAK,kBAAYH,EAASC,OAAQ,IAAID,EAASE,WAAW,SAEnD1C,GAEW,MAAlBwC,EAASC,QACTxC,QAAQC,IAAI,QAAUiC,EAAM,WACrBK,EAASI,OAAO7C,MAAK,SAAAI,GAExB,OADAH,EAAIG,KAAOA,EACJH,MAIRA,KAEV6C,OAAM,WAEH,OADA5C,QAAQC,IAAI,qBAAkBiC,EAAM,kCAC7B,MA9BR,oF,sBAkCA,SAAezC,EAAtB,oC,4CAAO,WAA4BiC,EAAMI,GAAlC,eAAAH,EAAA,6DACCO,EAAI,sBAAsBJ,EAD3B,SAEUK,MAAMD,EAAI,CACnBE,OAAO,MACPC,QAAQ,CACJC,cAAc,UAAUZ,KAG/B5B,MAAK,SAAAyC,GACF,IAAIxC,EAAMwC,EAEV,OADAxC,EAAIG,KAAO,GACW,MAAlBqC,EAASC,QACTxC,QAAQC,IAAI,QAAUiC,EAAK,IAAIK,EAASC,OAAQ,IAAID,EAASE,YAC7D/C,IAASmD,SAAQ,eACV9C,GAEW,MAAlBwC,EAASC,QACTxC,QAAQC,IAAI,QAAUiC,EAAM,WACrBK,EAASI,OAAO7C,MAAK,SAAAI,GAExB,OADAH,EAAIG,KAAOA,EACJH,MAIRA,KAEV6C,OAAM,WAEH,OADA5C,QAAQC,IAAI,qBAAkBiC,EAAM,kCAC7B,MA5BR,oF","file":"static/js/49.8825a290.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardBody, CardHeader, Col, Row, Table,Button } from 'reactstrap';\nimport fakeAuth from '../api/fakeAuth'\nimport {getOneDomain} from '../api/domain'\nimport moment from 'moment'\nimport Slide from 'react-reveal/Slide';\nimport {Link} from 'react-router-dom';\n\nclass UserRow extends React.Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        expandDescription: false,\n      }\n    }\n    toggleEditNav=()=>{\n      this.setState({\n        modalEditNav:!this.state.modalEditNav\n      })\n    }\n    toggleEventRow=()=>{\n        let toggle = this.state.expandDescription?false:true;\n        this.setState({expandDescription:toggle})\n      }\n    \n  render(){\n    const user = this.props.user\n    const ruleLink = `/domains/${user.id}`\n    const sourceIdLink = `/sources/${user.sourceId}`\n    return (\n        <React.Fragment>\n\n          <tr key={user.id}>\n          <th scope=\"row\">\n          <Button color=\"light\" size=\"sm\" onClick={this.toggleEventRow}><i className={this.state.expandDescription?\"fa fa-caret-up\":\"fa fa-caret-down\"} ></i></Button>\n        </th>\n          <td>{user.id}</td>\n          <td>{user.createdAt}</td>\n          <td>{user.name}</td>\n          <td>{user.source}</td>\n          <td>{user.dataType}</td>\n        </tr>\n        {this.state.expandDescription?\n            <Slide left duration=\"500\">\n              <tr><td colSpan={9}>\n              <Card>\n                <CardHeader>\n                  <b>dataDef</b>\n                </CardHeader>\n                <CardBody>\n                    <div><pre>{JSON.stringify(JSON.parse(user.defs),null,2)}</pre></div>\n                </CardBody>\n              </Card>\n              <Card>\n                <CardHeader>\n                  <b>accumulationKeys</b>\n                </CardHeader>\n                <CardBody>\n                    <div><pre>{JSON.stringify(user.accumulationKeys,null,2)}</pre></div>\n                </CardBody>\n              </Card>\n            </td></tr>\n            </Slide>\n              :<tr></tr>}\n        </React.Fragment>\n      )\n  }\n}\n\nclass User extends Component {\n\n  constructor(props){\n      super(props);\n      this.state={\n        data:{},\n      }\n  }\n\n  componentWillMount=()=>{\n    getOneDomain(fakeAuth.getAccessToken(), this.props.match.params.id).then(res=>{\n       console.log(res.data)\n       if (res.data){\n        this.setState({\n            data:res.data\n        })\n       }\n    })\n}\nrenderTable=(list)=>{\n    return(<Table responsive hover>\n        <thead>\n            <tr>\n            {list!==undefined?Object.keys(list).length>0?\n            Object.keys(list[0]).map(ele=>{\n                if (ele==='latestVersion'){\n                    return (\n                    <>\n                    <th scope='row'>\n                    latestVersionId\n                    </th>\n                    {Object.keys(list[0][ele]).map(eleChild=>(\n                        <td scope='row'>\n                        {eleChild}\n                        </td>\n                    ))}\n                    </>\n                    )\n                }\n                else if (ele!=='accumulationKeys'){\n                    return (<th scope=\"col\">{ele}</th>)\n                }\n            }):<th></th>\n            :<th></th>}\n            </tr>\n        </thead>\n        <tbody>\n        {list !== undefined ? list.map((ele,index)=>(\n            <tr key={index}\n            \n            >\n            {Object.keys(ele).length>0?Object.keys(ele).map(field=>{\n                if (field === 'infoCode'){\n                    return (<td scope='row' width=\"20%\">\n                        [{ele[field].id}] {ele[field].message} - {ele[field].description}\n                    </td>)\n                }\n                else if (field!=='accumulationKeys'){\n                    return (<td scope=\"row\">\n                    {ele[field]}\n                    </td>)\n                }\n            }):<th></th>}\n            </tr>\n        )):<tr></tr>}\n        </tbody>\n    </Table>)\n}\n\n  render() {\n    const domainsData = this.state.data;\n\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col lg={6}>\n            <Card>\n              <CardHeader>\n                <strong><i className=\"icon-info pr-1\"></i>Domain id: {this.props.match.params.id}</strong>\n              </CardHeader>\n              <CardBody>\n                  <Table responsive striped hover>\n                    <tbody>\n                      {\n                        domainsData?Object.keys(domainsData).map(key => {\n                            if (key ==='createdAt'){\n                                return (\n                                    <tr key={key}>\n                                      <td>{`${key}:`}</td>\n                                      <td><strong>{moment(domainsData[key]).format('lll')}</strong></td>\n                                    </tr>\n                                  )\n                            }\n                            else if (key!=='dataDefinitions'){\n                              return (\n                                  <tr key={key}>\n                                    <td>{`${key}:`}</td>\n                                    <td><strong>{domainsData[key]}</strong></td>\n                                  </tr>\n                                )\n                            }\n                          }):<tr></tr>\n                      }\n                    </tbody>\n                  </Table>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n        <Col lg={12}>\n            <Card>\n              <CardHeader>\n                <strong><i className=\"icon-info pr-1\"></i>Data definitions</strong>\n              </CardHeader>\n              <CardBody>\n              <Table responsive hover>\n                <thead>\n                    <tr>\n                    <th scope=\"col\"></th>\n                      <th scope=\"col\">ID</th>\n                      <th scope=\"col\">CREATED AT</th>\n                      <th scope=\"col\">NAME</th>\n                      <th scope=\"col\">SOURCE</th>\n                      <th scope=\"col\">DATA TYPE</th>\n\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {domainsData.dataDefinitions?domainsData.dataDefinitions.map((user) =>\n                      <UserRow key={user.id} user={user}/>\n                    ):<tr></tr>}\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default User;\n","import fakeAuth from './fakeAuth'\nimport {postDataTokenMode} from './fetch'\nimport swal from 'sweetalert'\nexport async function createDomain(data, token) {\n    return await postDataTokenMode('POST','/api/domainConfigs', data, token).then((data) => {\n        console.log(data)\n        return data;// JSON data parsed by `response.json()` call\n      });\n}\n\nexport async function editDomain(domainId, data, token) {\n    return await postDataTokenMode('PUT','/api/domainConfigs/'+domainId, data, token).then((data) => {\n        console.log(data)\n        return data;// JSON data parsed by `response.json()` call\n      });\n}\n\nexport async function deleteDomain(domainId, data, token) {\n    return postDataTokenMode('DELETE','/api/domainConfigs/'+domainId, data, token).then((data) => {\n        console.log(data)\n        return data;// JSON data parsed by `response.json()` call\n      });\n}\n\nexport async function getDomains(token,page,size){\n    let url='/api/domainConfigs?page='+page+'&size='+size\n    return await fetch(url,{\n        method:'GET',\n        headers:{\n            Authorization:'Bearer '+token,\n        },\n    })\n    .then(response => {\n        let res = response\n        res.data = []\n        if (response.status!==200){\n            console.log(\"URL: \" + url +\" \"+response.status+ \" \"+response.statusText)\n            // fakeAuth.signout(()=>{})\n            swal(\"Thông báo\",response.status+ \" \"+response.statusText,\"error\")\n\n            return res\n        }\n        if (response.status===200){\n            console.log(\"URL: \" + url + \" 200 OK\")\n            return response.json().then(data=>{\n                res.data = data;\n                return res;\n            })\n        }\n\n        return res\n    })\n    .catch(() => {\n        console.log(\"Can’t access \" + url + \" response. Blocked by browser?\")\n        return {};\n    })\n}\n\nexport async function getOneDomain(token,domainId){\n    let url='/api/domainConfigs/'+domainId\n    return await fetch(url,{\n        method:'GET',\n        headers:{\n            Authorization:'Bearer '+token,\n        },\n    })\n    .then(response => {\n        let res = response\n        res.data = []\n        if (response.status!==200){\n            console.log(\"URL: \" + url +\" \"+response.status+ \" \"+response.statusText)\n            fakeAuth.signout(()=>{})\n            return res\n        }\n        if (response.status===200){\n            console.log(\"URL: \" + url + \" 200 OK\")\n            return response.json().then(data=>{\n                res.data = data;\n                return res;\n            })\n        }\n\n        return res\n    })\n    .catch(() => {\n        console.log(\"Can’t access \" + url + \" response. Blocked by browser?\")\n        return {};\n    })\n}"],"sourceRoot":""}